{"/home/usuario/ull-esit-inf-dsi-23-24-prct05-objects-classes-interfaces-AlejandroJ22/ejercicios/src/ejercicio_1_pe.ts":{"path":"/home/usuario/ull-esit-inf-dsi-23-24-prct05-objects-classes-interfaces-AlejandroJ22/ejercicios/src/ejercicio_1_pe.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":11,"column":4},"end":{"line":12,"column":25}},"3":{"start":{"line":12,"column":8},"end":{"line":12,"column":25}},"4":{"start":{"line":14,"column":20},"end":{"line":23,"column":5}},"5":{"start":{"line":25,"column":20},"end":{"line":25,"column":22}},"6":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"7":{"start":{"line":28,"column":8},"end":{"line":28,"column":75}},"8":{"start":{"line":31,"column":4},"end":{"line":33,"column":5}},"9":{"start":{"line":32,"column":8},"end":{"line":32,"column":25}},"10":{"start":{"line":35,"column":29},"end":{"line":35,"column":31}},"11":{"start":{"line":36,"column":4},"end":{"line":39,"column":5}},"12":{"start":{"line":37,"column":8},"end":{"line":37,"column":60}},"13":{"start":{"line":38,"column":8},"end":{"line":38,"column":66}},"14":{"start":{"line":40,"column":4},"end":{"line":40,"column":56}},"15":{"start":{"line":42,"column":4},"end":{"line":44,"column":5}},"16":{"start":{"line":43,"column":8},"end":{"line":43,"column":38}},"17":{"start":{"line":46,"column":4},"end":{"line":49,"column":5}},"18":{"start":{"line":46,"column":17},"end":{"line":46,"column":46}},"19":{"start":{"line":47,"column":8},"end":{"line":48,"column":39}},"20":{"start":{"line":48,"column":12},"end":{"line":48,"column":39}},"21":{"start":{"line":51,"column":4},"end":{"line":51,"column":21}},"22":{"start":{"line":53,"column":0},"end":{"line":53,"column":36}}},"fnMap":{"0":{"name":"getAllergens","decl":{"start":{"line":9,"column":9},"end":{"line":9,"column":21}},"loc":{"start":{"line":9,"column":43},"end":{"line":52,"column":1}},"line":9}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":4},"end":{"line":12,"column":25}},"type":"if","locations":[{"start":{"line":11,"column":4},"end":{"line":12,"column":25}},{"start":{"line":11,"column":4},"end":{"line":12,"column":25}}],"line":11},"1":{"loc":{"start":{"line":11,"column":8},"end":{"line":11,"column":73}},"type":"binary-expr","locations":[{"start":{"line":11,"column":8},"end":{"line":11,"column":31}},{"start":{"line":11,"column":35},"end":{"line":11,"column":73}}],"line":11},"2":{"loc":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},{"start":{"line":27,"column":4},"end":{"line":29,"column":5}}],"line":27},"3":{"loc":{"start":{"line":31,"column":4},"end":{"line":33,"column":5}},"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":33,"column":5}},{"start":{"line":31,"column":4},"end":{"line":33,"column":5}}],"line":31},"4":{"loc":{"start":{"line":47,"column":8},"end":{"line":48,"column":39}},"type":"if","locations":[{"start":{"line":47,"column":8},"end":{"line":48,"column":39}},{"start":{"line":47,"column":8},"end":{"line":48,"column":39}}],"line":47}},"s":{"0":1,"1":1,"2":8,"3":3,"4":5,"5":5,"6":5,"7":2,"8":5,"9":1,"10":4,"11":4,"12":8,"13":8,"14":4,"15":4,"16":20,"17":4,"18":4,"19":32,"20":6,"21":4,"22":1},"f":{"0":8},"b":{"0":[3,5],"1":[8,6],"2":[2,3],"3":[1,4],"4":[6,26]},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-23-24-prct05-objects-classes-interfaces-AlejandroJ22/ejercicios/src/ejercicio_1_pe.ts","sources":["/home/usuario/ull-esit-inf-dsi-23-24-prct05-objects-classes-interfaces-AlejandroJ22/ejercicios/src/ejercicio_1_pe.ts"],"names":[],"mappings":";;;AAAA;;;;GAIG;AACH,SAAgB,YAAY,CAC1B,mBAA2B;IAE3B,+BAA+B;IAC/B,IAAI,mBAAmB,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC;QACnE,OAAO,SAAS,CAAC;IACnB,+CAA+C;IAC/C,MAAM,OAAO,GAAa;QACxB,MAAM;QACN,OAAO;QACP,WAAW;QACX,QAAQ;QACR,OAAO;QACP,SAAS;QACT,WAAW;QACX,OAAO;KACR,CAAC;IACF,mCAAmC;IACnC,IAAI,SAAS,GAAa,EAAE,CAAC;IAC7B,0GAA0G;IAC1G,IAAI,mBAAmB,GAAG,GAAG,EAAE,CAAC;QAC9B,mBAAmB,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IACrE,CAAC;IACD,2CAA2C;IAC3C,IAAI,mBAAmB,GAAG,CAAC,EAAE,CAAC;QAC5B,OAAO,SAAS,CAAC;IACnB,CAAC;IACD,+CAA+C;IAC/C,IAAI,kBAAkB,GAAa,EAAE,CAAC;IACtC,OAAO,mBAAmB,GAAG,CAAC,EAAE,CAAC;QAC/B,kBAAkB,CAAC,OAAO,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC;QACpD,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC;IAC5D,CAAC;IACD,kBAAkB,CAAC,OAAO,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC;IACpD,4DAA4D;IAC5D,OAAO,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACrC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC;IACD,gEAAgE;IAChE,KAAK,IAAI,CAAC,GAAG,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;QACxD,IAAI,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC;YAAE,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7D,CAAC;IACD,gCAAgC;IAChC,OAAO,SAAS,CAAC;AACnB,CAAC;AA5CD,oCA4CC;AAED,kDAAkD","sourcesContent":["/**\n * Converts a positive integer into a list of allergens that cannot reapeat.\n * @param allergen_identifier The positive integer that represent the allergens.\n * @returns A list of allergens.\n */\nexport function getAllergens(\n  allergen_identifier: number\n): string[] | undefined {\n  // Check if the input is valid.\n  if (allergen_identifier < 1 || !Number.isInteger(allergen_identifier))\n    return undefined;\n  // Define signals corresponding to each action.\n  const signals: string[] = [\n    \"Gato\",\n    \"Polen\",\n    \"Chocolate\",\n    \"Tomate\",\n    \"Fresa\",\n    \"Marisco\",\n    \"Cacahuete\",\n    \"Huevo\",\n  ];\n  // Initialize the list of allergen.\n  let allergens: string[] = [];\n  // If the number is greater than 255, reduce it to the range [0, 255]. If 256 = 0 there are not allergens.\n  if (allergen_identifier > 255) {\n    allergen_identifier -= Math.floor(allergen_identifier / 256) * 256;\n  }\n  // If the number is zero, return undefined.\n  if (allergen_identifier < 1) {\n    return undefined;\n  }\n  // Convert the number to binary representation.\n  let binarioNumberArray: number[] = [];\n  while (allergen_identifier > 1) {\n    binarioNumberArray.unshift(allergen_identifier % 2);\n    allergen_identifier = Math.floor(allergen_identifier / 2);\n  }\n  binarioNumberArray.unshift(allergen_identifier % 2);\n  // Pad the binary array with zeros to make it 8 digits long.\n  while (binarioNumberArray.length < 8) {\n    binarioNumberArray.unshift(0);\n  }\n  // Add allergens to the list based on the binary representation.\n  for (let i = binarioNumberArray.length - 1; i >= 0; --i) {\n    if (binarioNumberArray[i] == 1) allergens.push(signals[i]);\n  }\n  // Return the list of allergens.\n  return allergens;\n}\n\n// console.log(getAllergens(3)); // All allergens.\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"80ee810adf2c4f38e8cdeed94830502f2c805d67","contentHash":"7386c9d1b043cbf4ef6667197ee9e93d473e7a676c5d5d2571d81204abc2ddd9"}}